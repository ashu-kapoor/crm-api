/****************
Generated by NODEBOOTSTRAPPER
Author: Ashutosh Kapoor
GIT LINK : https://github.com/ashu-kapoor/NODEBOOTSTRAPPER
****************/

/**
 * @param {array} routes - routes array having keys - method, routeSpecificMiddlewares, validatorFn
 * @param {array} commonMiddlewares - array of middlewares to be applied to all routes
 * @param {array} postMiddlewares - array of middlewares to be applied after all routes
 * @param {object} options - options object
 * @param {object} dbConnectionPromise - promise if sever to start on connecting to DB
 **/

const express = require("express");
const { isArray, isFunction } = require("lodash");
const nocache = require("nocache");
const sanitizer = require("sanitizer");

//Takes in routes, commonMiddlewares and Options and dbConnectionPromise
module.exports.loadApp = (
  routes,
  commonMiddlewares,
  postMiddlewares,
  options = {
    useNoCache: true,
    allowCORSOrigin: "*",
    multiparserConfig: null,
    port: 8080,
    useJsonParser: true,
    useUrlEncodedParser: false,
  },
  dbConnectionPromise = null
) => {
  if (!(isArray(routes) && routes.length > 0)) {
    throw new Error("Initialisation failed. Routes not defined");
  }

  const {
    useNoCache,
    allowCORSOrigin,
    multiparserConfig,
    port,
    useJsonParser,
    useUrlEncodedParser,
  } = options;
  const app = express();
  app.disable("x-powered-by");
  app.set("etag", false);
  useNoCache && app.use(nocache());
  useJsonParser && app.use(express.json());
  useUrlEncodedParser &&
    app.use(
      express.urlencoded({
        extended: true,
      })
    );

  //Set CORS Origin
  app.use((req, res, next) => {
    res.setHeader("Access-Control-Allow-Origin", allowCORSOrigin);
    res.setHeader(
      "Access-Control-Allow-Methods",
      "GET, POST, PUT, PATCH, DELETE"
    );
    res.setHeader(
      "Access-Control-Allow-Headers",
      "Content-Type, Authorization"
    );
    next();
  });

  if (multiparserConfig) {
    //Todo
  }

  //initialise common middlewares
  if (commonMiddlewares && isArray(commonMiddlewares)) {
    commonMiddlewares.forEach((middleware) => {
      if (isFunction(middleware)) {
        app.use(middleware);
      } else {
        throw new Error(
          "Initialisation failed. Common middleware is not a function"
        );
      }
    });
  }

  //initialise routes
  routes.forEach((route) => {
    route.method(app, route.routeSpecificMiddlewares, route.validatorFn);
  });

  //initialise post middlewares
  if (postMiddlewares && isArray(postMiddlewares)) {
    postMiddlewares.forEach((middleware) => {
      if (isFunction(middleware)) {
        app.use(middleware);
      } else {
        throw new Error(
          "Initialisation failed. Postmiddleware is not a function"
        );
      }
    });
  }

  if (dbConnectionPromise) {
    dbConnectionPromise
      .then((res) => {
        app.listen(port);
      })
      .catch((err) => console.log("Error connecting to DB" + err));
  } else {
    app.listen(port);
  }
};
